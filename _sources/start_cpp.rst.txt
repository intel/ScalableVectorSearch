.. Copyright (C) 2023 Intel Corporation
..
.. This software and the related documents are Intel copyrighted materials,
.. and your use of them is governed by the express license under which they
.. were provided to you ("License"). Unless the License provides otherwise,
.. you may not use, modify, copy, publish, distribute, disclose or transmit
.. this software or the related documents without Intel's prior written
.. permission.
..
.. This software and the related documents are provided as is, with no
.. express or implied warranties, other than those that are expressly stated
.. in the License.

.. _start_cpp:

Getting started with C++
########################
The `open-source SVS library <https://github.com/intel/ScalableVectorSearch>`_ supports all documented features except our proprietary vector 
compression (`LVQ <https://vldb.org/pvldb/volumes/16/paper/Similarity%20search%20in%20the%20blink%20of%20an%20eye%20with%20compressed%20indices>`_ and 
`Leanvec <https://openreview.net/pdf?id=wczqrpOrIc>`_), 
which are exclusive to Intel hardware and available via our `shared library <https://github.com/intel/ScalableVectorSearch/releases>`_ and `PyPI package <https://pypi.org/project/scalable-vs/>`_.
This tutorial shows how to use the shared library to enable our proprietary vector compression and unlock significant performance and memory gains!

We also provide an :ref:`example <using_open_svs_only_cpp>` using the `open-source SVS library <https://github.com/intel/ScalableVectorSearch>`_  only.

.. contents::
   :local:
   :depth: 2

.. _build_svs_cpp:

Building
********

Building the SVS example should be relatively straight-forward. We test on Ubuntu 22.04 LTS, but any Linux distribution should work.

Prerequisites
=============

* A C++20 capable compiler:

  * GCC >= 11.0
  * Clang >= 18.0 (note that the shared library requires a higher Clang version than the open-source library)


CMake build
===========

To build and run the SVS example using our `shared library <https://github.com/intel/ScalableVectorSearch/releases>`_ run the following commands:

.. code-block:: sh

    git clone https://github.com/intel/ScalableVectorSearch
    cd ScalableVectorSearch/examples/cpp/shared
    mkdir build && cd build
    cmake ..
    make -j
    ./example_vamana_with_compression
    
See `CMakeLists.txt <https://github.com/intel/ScalableVectorSearch/blob/main/examples/cpp/shared/CMakeLists.txt>`_ for details on how the shared library is used and remember to update the link 
in CMakeLists.txt to **download the latest shared library release**. 

Step by step example using vector compression
**********************************************

Here is a step by step explanation of the :ref:`example <entire_example_cpp>` that showcases the most important features of SVS. 
We will use the random dataset included in SVS for testing in ``data/test_dataset``.

Compress the data
==================

To boost performance and reduce memory usage, we first compress the data using our vector compression technique LVQ. See :ref:`compression-setting` for details.

.. literalinclude:: ../ScalableVectorSearch/examples/cpp/shared/example_vamana_with_compression.cpp
   :language: cpp
   :start-after: [Compress data]
   :end-before: [Compress data]
   :dedent: 4


Building the index
==================

To search effectively, first build a graph-based index linking related data vectors. We'll keep defaults for hyperparameters, 
exact values can be :ref:`tuned <graph-build-param-setting>` later based on the dataset.

.. literalinclude:: ../ScalableVectorSearch/examples/cpp/shared/example_vamana_with_compression.cpp
   :language: cpp
   :start-after: [Index Build]
   :end-before: [Index Build]
   :dedent: 4


Searching the index
===================
The graph is built; we can now query it. Load queries from disk and set ``search_window_size`` --larger values boost accuracy but reduce speed (see :ref:`search-window-size-setting`). 

.. literalinclude:: ../ScalableVectorSearch/examples/cpp/shared/example_vamana_with_compression.cpp
   :language: cpp
   :start-after: [Perform Queries]
   :end-before: [Perform Queries]
   :dedent: 4

After searching, we compare the results with the ground-truth and print the obtained recall.

.. literalinclude:: ../ScalableVectorSearch/examples/cpp/shared/example_vamana_with_compression.cpp
   :language: cpp
   :start-after: [Recall]
   :end-before: [Recall]
   :dedent: 4


Saving and loading the index
=============================

If you are satisfied with the performance of the generated index, you can save it to disk to avoid rebuilding it in the future. 

.. literalinclude:: ../ScalableVectorSearch/examples/cpp/shared/example_vamana_with_compression.cpp
   :language: cpp
   :start-after: [Saving Loading]
   :end-before: [Saving Loading]
   :dedent: 4

.. note::

    The save index function currently uses three folders for saving.
    All three are needed to be able to reload the index.

    * One folder for the graph.
    * One folder for the data.
    * One folder for metadata.

    This is subject to change in the future.

.. _entire_example_cpp:

Entire example
==============

.. literalinclude:: ../ScalableVectorSearch/examples/cpp/shared/example_vamana_with_compression.cpp
   :language: cpp


.. _using_open_svs_only_cpp:

Using open-source SVS only
***************************

Building and installing
=======================

Prerequisites

* A C++20 capable compiler:

  * GCC >= 11.0
  * Clang >= 13.0


To build SVS and the included examples, use the following:

.. code-block:: sh
   
    git clone https://github.com/intel/ScalableVectorSearch
    cd ScalableVectorSearch
    mkdir build && cd build
    cmake .. -DSVS_BUILD_EXAMPLES=YES
    cmake --build . -j$(nproc)

Run this command to confirm SVS is installed correctly, it should print some types, like ``float32``.

.. code-block:: sh

    examples/cpp/types

Run this command to execute the example

.. code-block:: sh

    examples/cpp/vamana ../data/test_dataset/data_f32.fvecs ../data/test_dataset/queries_f32.fvecs ../data/test_dataset/groundtruth_euclidean.ivecs


.. _entire_example_open_source_cpp:

Entire example
==============

.. literalinclude:: ../ScalableVectorSearch/examples/cpp/vamana.cpp
   :language: cpp
