.. Copyright (C) 2023 Intel Corporation
..
.. This software and the related documents are Intel copyrighted materials,
.. and your use of them is governed by the express license under which they
.. were provided to you ("License"). Unless the License provides otherwise,
.. you may not use, modify, copy, publish, distribute, disclose or transmit
.. this software or the related documents without Intel's prior written
.. permission.
..
.. This software and the related documents are provided as is, with no
.. express or implied warranties, other than those that are expressly stated
.. in the License.

.. _start:

Getting started with Python
###########################
The `open-source SVS library <https://github.com/intel/ScalableVectorSearch>`_ supports all documented features except our proprietary vector 
compression (`LVQ <https://vldb.org/pvldb/volumes/16/paper/Similarity%20search%20in%20the%20blink%20of%20an%20eye%20with%20compressed%20indices>`_ and 
`Leanvec <https://openreview.net/pdf?id=wczqrpOrIc>`_), 
which are exclusive to Intel hardware and available via our `shared library <https://github.com/intel/ScalableVectorSearch/releases>`_ and `PyPI package <https://pypi.org/project/scalable-vs/>`_.
This tutorial shows how to use our vector compression and unlock significant performance and memory gains!

We also provide an :ref:`example <using_open_svs_only>` using the `open-source SVS library <https://github.com/intel/ScalableVectorSearch>`_  only.

.. contents::
   :local:
   :depth: 2

.. _install_svs:

Installation
************
Installing SVS is simple. We test on Ubuntu 22.04 LTS, but it should work on any Linux distribution or macOS.

Prerequisites
=============

* Python >= 3.9


Installing
==========

The SVS Python package is available as a Python wheel 

.. code-block:: sh

    pip install scalable-vs


or as a Conda package

.. code-block:: sh

    conda install -c https://software.repos.intel.com/python/conda/ scalable-vs


Note that the Python package name is ``scalable-vs`` while
the Python import name is ``svs``.

Run this command to confirm SVS is installed correctly, it should print the library version. 

.. code-block:: sh

    python3 -c "import svs; print(svs.library_version())"


.. _step-by-step-example-with-compression:


Step by step example using vector compression
**********************************************

Here is a step by step explanation of the :ref:`example <entire_example>` that showcases the most important features of SVS. 
We will use a random dataset generated using :py:func:`svs.generate_test_dataset`.

We first load svs and the os module also required for this example.

.. literalinclude:: ../examples/python/example_vamana_with_compression.py
   :language: python
   :start-after: [imports]
   :end-before: [imports]

Then proceed to generate the test dataset.

.. literalinclude:: ../examples/python/example_vamana_with_compression.py
   :language: python
   :start-after: [generate-dataset]
   :end-before: [generate-dataset]
   :dedent: 4


Compress the data
==================

To boost performance and reduce memory usage, we first compress the data using our vector compression technique LeanVec. 
See :ref:`vector_compression` and :ref:`compression-setting` for details. For LVQ usage, see this `example <https://github.com/intel/ScalableVectorSearch/blob/main/examples/python/vamana_with_compression_lvq.py>`_.

.. literalinclude:: ../examples/python/example_vamana_with_compression.py
   :language: python
   :start-after: [create-loader]
   :end-before: [create-loader]
   :dedent: 4

.. _graph-building-code:

Building the index
==================

To search effectively, first build a graph-based index linking related data vectors. We'll keep defaults for hyperparameters, 
except for ``graph_max_degree`` and build ``window_size``. Other values can be :ref:`tuned <graph-build-param-setting>` later based on the dataset. 
See this :ref:`example <how_to_run_dynamic_indexing>` for dynamic indexing (adding and removing vectors over time). 

.. literalinclude:: ../examples/python/example_vamana_with_compression.py
   :language: python
   :start-after: [build-parameters]
   :end-before: [build-parameters]
   :dedent: 4

.. literalinclude:: ../examples/python/example_vamana_with_compression.py
   :language: python
   :start-after: [build-index]
   :end-before: [build-index]
   :dedent: 4

.. _search_with_compression:

Searching the index
===================
The graph is built; we can now query it. Load queries from disk and set ``search_window_size`` --larger values boost accuracy but reduce speed (see :ref:`search-window-size-setting`). 

.. literalinclude:: ../examples/python/example_vamana_with_compression.py
   :language: python
   :start-after: [perform-queries]
   :end-before: [perform-queries]
   :dedent: 4

After searching, we compare the results with the ground-truth and print the obtained recall.

.. literalinclude:: ../examples/python/example_vamana_with_compression.py
   :language: python
   :start-after: [recall]
   :end-before: [recall]
   :dedent: 4

.. _index_saving:

Saving and loading the index
=============================

If you are satisfied with the performance of the generated index, you can save it to disk to avoid rebuilding it in the future.

.. literalinclude:: ../examples/python/example_vamana_with_compression.py
   :language: python
   :start-after: [saving-loading]
   :end-before: [saving-loading]
   :dedent: 4

See :py:func:`svs.Vamana.save` for details about the save function.

.. note::

    The save index function currently uses three folders for saving.
    All three are needed to be able to reload the index.

    * One folder for the graph.
    * One folder for the data.
    * One folder for metadata.

    This is subject to change in the future.

.. _entire_example:

Entire example
==============

We run automated tests to ensure the script stays valid. You can ignore all test-related code.

.. literalinclude:: ../examples/python/example_vamana_with_compression.py
   :language: python


.. _using_open_svs_only:

Using open-source SVS only
***************************

Building and installing
=======================

Prerequisites

* Python >= 3.9

* A C++20 capable compiler:

  * GCC >= 11.0
  * Clang >= 13.0

To build and install, clone the repo and run the following pip install command.

.. code-block:: sh

    # Clone the repository
    git clone https://github.com/intel/ScalableVectorSearch
    cd ScalableVectorSearch

    # Install svs using pip
    pip install bindings/python

Run this command to confirm SVS is installed correctly, it should print the library version. 

.. code-block:: sh

    python3 -c "import svs; print(svs.library_version())"


.. _entire_example_open_source:

Entire example
==============

We run automated tests to ensure the script stays valid. You can ignore all test-related code.

.. literalinclude:: ../ScalableVectorSearch/examples/python/example_vamana_open_source.py
   :language: python


