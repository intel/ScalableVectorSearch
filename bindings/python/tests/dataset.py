# Copyright (C) 2023 Intel Corporation
#
# This software and the related documents are Intel copyrighted materials,
# and your use of them is governed by the express license under which they
# were provided to you ("License"). Unless the License provides otherwise,
# you may not use, modify, copy, publish, distribute, disclose or transmit
# this software or the related documents without Intel's prior written
# permission.
#
# This software and the related documents are provided as is, with no
# express or implied warranties, other than those that are expressly stated
# in the License.

# Matchers for reference data
# These should be kept in-sync with the TOML file layouts generated by the benchmarking
# framework and have semantics similar to `key_equal` when matching dataset types.

# Classic, uncompressed data
class UncompressedMatcher:
    def __init__(self, data_type: str):
        self.data_type = data_type
        self.kind = "uncompressed"

    def is_match(self, d: dict):
        if d["kind"] != self.kind:
            return False

        return d["dataset"]["data_type"] == self.data_type

# LVQ Compressed datasets
class LVQMatcher:
    def __init__(self, primary: int, residual: int = 0):
        self.primary = primary
        self.residual = residual
        self.kind = "lvq"

    def is_match(self, d: dict):
        if d["kind"] != self.kind:
            return False

        i = d["dataset"]
        return i["primary"] == self.primary and i["residual"] == self.residual

# LeanVec reduced datasets
class LeanVecMatcher:
    def __init__(self, primary_kind: str, secondary_kind: str, leanvec_dims: int, is_pca: bool = True):
        self.primary_kind = primary_kind
        self.secondary_kind = secondary_kind
        self.leanvec_dims = leanvec_dims
        self.is_pca = is_pca
        self.kind = "leanvec"

    def is_match(self, d: dict):
        if d["kind"] != self.kind:
            return False

        i = d["dataset"]

        # In case a matrix file is provided, then LeanVec OOD is used, not the PCA
        using_pca = i["data_matrix"] == ""

        return i["primary"] == self.primary_kind and \
            i["secondary"] == self.secondary_kind and \
            i["leanvec_dims"] == self.leanvec_dims and \
            using_pca == self.is_pca

